name: Anaconda-Linux

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      ref:
        required: false
        type: string
      check_run_id:
        required: false
        type: string

jobs:
  Anaconda-Linux:
    runs-on: ubuntu-latest
    name: Unit tests

    steps:
      - name: Get ref
        id: ref
        run: |
          ref = "${{ inputs.ref }}" or "${{ github.event.ref }}"
          with open("${{ github.output }}", "a") as f:
              print("ref=", ref, sep='', file=f)
        shell: python
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.ref.outputs.ref }}
      - name: Install dependencies
        uses: ./.github/actions/linux_install
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: true
          python-version: ${{ inputs.python_version }}
      - name: "Setup"
        id: token
        run: |
          pip install jwt requests
          python ci_tools/setup_check_run.py
        env:
          PEM: ${{ secrets.BOT_PEM }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_CHECK_RUN_ID: ${{ inputs.check_run_id }}
      - name: Install python dependencies
        uses: ./.github/actions/conda_installation
        with:
          mpi_type: openmpi
      - name: Fortran/C tests with pytest
        id: f_c_pytest
        timeout-minutes: 60
        uses: ./.github/actions/pytest_run
        with:
          shell_cmd: "bash -l {0}"
      - name: Python tests with pytest
        id: python_pytest
        timeout-minutes: 20
        uses: ./.github/actions/pytest_run_python
        with:
          shell_cmd: "bash -l {0}"
      - name: Parallel tests with pytest
        id: parallel
        timeout-minutes: 20
        uses: ./.github/actions/pytest_parallel
        with:
          shell_cmd: "bash -l {0}"
      - name: "Post completed"
        if: always()
        run:
          python ci_tools/complete_check_run.py ${{ steps.f_c_pytest.outcome }} ${{ steps.python_pytest.outcome }} ${{ steps.parallel.outcome }}
        env:
          installation_token: ${{ steps.token.outputs.installation_token }}
          installation_token_exp: ${{ steps.token.outputs.installation_token_exp }}
          check_run_id: ${{ inputs.check_run_id }}
