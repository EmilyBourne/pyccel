name: Unit test coverage

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      ref:
        required: false
        type: string
      base:
        required: true
        type: string
      check_run_id:
        required: false
        type: string

jobs:
  CoverageChecker:

    runs-on: ubuntu-latest
    name: Unit tests

    steps:
      - name: Get ref
        id: ref
        run: |
          ref = "${{ inputs.ref }}" or "${{ github.event.ref }}"
          with open("${{ github.output }}", "a") as f:
              print("ref=", ref, sep='', file=f)
        shell: python
      - uses: actions/checkout@v3
        with:
          ref: ${{ steps.ref.outputs.ref }}
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
      - name: "Setup"
        id: token
        run: |
          pip install jwt requests
          python ci_tools/setup_check_run.py
        env:
          PEM: ${{ secrets.BOT_PEM }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_CHECK_RUN_ID: ${{ inputs.check_run_id }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install defusedxml
        shell: bash
      - name: Collect coverage information
        uses: actions/download-artifact@v3
        with:
          name: coverage-artifact
      - name: Collect diff information
        run: |
          git fetch
          git diff origin/${{ inputs.base }}..HEAD --no-indent-heuristic --unified=0 --output=pull_diff.txt --no-color
        shell: bash
      - name: Check coverage
        id: coverage
        run: |
          python ci_tools/check_new_coverage.py pull_diff.txt cobertura.xml ${{ steps.ref.outputs.ref }} $GITHUB_STEP_SUMMARY review.json
        shell: bash
      - name: "Post completed"
        if: always()
        run:
          python ci_tools/complete_check_run.py ${{ steps.coverage.outcome }}
        env:
          installation_token: ${{ steps.token.outputs.installation_token }}
          installation_token_exp: ${{ steps.token.outputs.installation_token_exp }}
