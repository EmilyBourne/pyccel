name: Windows unit tests

on:
  workflow_dispatch:
    inputs:
      python_version:
        required: true
        type: string
      ref:
        required: true
        type: string

jobs:
  Windows:

    runs-on: windows-latest
    name: Unit tests

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
            # The second most recent version is used as
            # setup-python installs the most recent patch
            # which leads to linking problems as there are
            # 2 versions of python3X.a and the wrong one
            # is chosen
          python-version: 3.7
        if: inputs.python_version == ''
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}
        if: inputs.python_version != ''
      # Uncomment to examine DLL requirements with 'objdump -x FILE'
      #- name: Install mingw tools
      #  uses: msys2/setup-msys2@v2
      - name: Install dependencies
        uses: ./.github/actions/windows_install
      - name: Install Pyccel with tests
        run: |
            python -m pip install --upgrade pip
            python -m pip install .[test]
        shell: bash
      - name: Fortran/C tests with pytest
        id: f_c_pytest
        timeout-minutes: 60
        uses: ./.github/actions/pytest_run
      - name: Python tests with pytest
        id: python_pytest
        timeout-minutes: 20
        uses: ./.github/actions/pytest_run_python
      - name: Parallel tests with pytest
        id: parallel
        timeout-minutes: 20
        uses: ./.github/actions/pytest_parallel
      - name: Final status
        if: always()
        id: status
        run:
          python ci_tools/check_success.py $GITHUB_OUTPUT steps.f_c_pytest.outcome steps.python_pytest.outcome steps.parallel.outcome
      - name: "Post completed"
        if: always()
        uses: ./.github/actions/post_completed
        with:
          installation_token: ${{ steps.token.outputs.installation_token }}
          run_id: ${{ steps.check_create.outputs.check_id }}
          status: ${{ steps.status.outcome }}
