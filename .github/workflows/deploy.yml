name: Deploy new version to PyPi

on:
  push:
    branches: [main]
  #workflow_run:
  #  workflows: [Anaconda-Windows]
  #  types:
  #    - completed

jobs:
  waitForWorklows:
    name: Wait for workflows
    runs-on: ubuntu-latest
    #if: github.event.workflow_run.head_branch == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install python dependencies
        run: |
          python -m pip install requests jwt
      #- name: Wait for workflows
      #  run: |
      #    python3 wait_for_main_workflows.py
      #  working-directory: ./ci_tools
      #  shell: bash
      #  env:
      #    COMMIT: ${{ github.event.workflow_run.head_sha }}

  deployVersion:
    runs-on: ubuntu-latest
    needs: [waitForWorklows]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 2
      - name: Install dependencies
        uses: ./.github/actions/linux_install
      - name: Update build
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m pip install --upgrade twine
      #- name: Build and deploy
      #  run: |
      #    echo ${{ github.event.workflow_run.head_branch }}
      #    python3 -m build
      #    ls dist/*
      #    python3 -m twine upload --repository pypi dist/* --non-interactive
      #  shell: bash
      #  env:
      #    TWINE_USERNAME: '__token__'
      #    TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      - name: Install Pyccel without tests
        run: |
          python -m pip install .
      - name: "Get tag name"
        id: tag_name
        run: |
          version=$(python -c "from pyccel import __version__; print(__version__)")
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=v${version}" >> $GITHUB_OUTPUT
      - name: "Get release notes"
        id: release_notes
        run: |
          grep "^## " CHANGELOG.md -n
          grep "^## " CHANGELOG.md -n | head -1
          grep "^## " CHANGELOG.md -n | head -2
          START_LINE=$(grep "^## " CHANGELOG.md -n | head -1 | cut -d: -f -1)
          END_LINE=$(grep "^## " CHANGELOG.md -n | head -2 | tail -1 | cut -d: -f -1)
          echo $START_LINE
          echo $END_LINE
          START_LINE=$((${START_LINE}+1))
          END_LINE=$((${END_LINE}-1))
          sed -n ${START_LINE},${END_LINE}p CHANGELOG.md > release_notes.md
      - name: "Get contributors"
        run: |
          LAST_RELEASE_COMMIT=$(git log -2 --pretty=%H | tail -1)
          CURRENT_RELEASE_COMMIT=$(git log -1 --pretty=%H)
          echo "Releases ${LAST_RELEASE_COMMIT}..${CURRENT_RELEASE_COMMIT}"

          NEW_CONTRIBUTORS=$(git diff --no-indent-heuristic --unified=0 --no-color ${LAST_RELEASE_COMMIT}..${CURRENT_RELEASE_COMMIT} AUTHORS | { grep "^\+[^+]" || true; } | cut -d ' ' -f 2-)
          echo "New contribs"
          echo "${NEW_CONTRIBUTORS}"
          if [ -n ${NEW_CONTRIBUTORS} ]
          then
            echo "## New Contributors" >> release_notes.md
            for c in ${NEW_CONTRIBUTORS}
            do
              echo "- ${c}" >> release_notes.md
            done
            echo "" >> release_notes.md
          fi

          echo "Ready"

          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /search/issues?q="${CURRENT_RELEASE_COMMIT}"

          PR_ID=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /search/issues?q="${CURRENT_RELEASE_COMMIT}" | jq '.["items"][0]["number"]')

          echo "Found PR : ${PR_ID}"
          gh pr view ${PR_ID} --json commits
          jq '.["commits"][]["authors"][]["login"]'
          CONTRIBUTORS=$(gh pr view ${PR_ID} --json commits | jq '.["commits"][]["authors"][]["login"]' | tr -d '"' | sort -u)
          echo "Contributors"
          echo ${CONTRIBUTORS}

          echo "## Contributors" >> release_notes.md
          echo "${CONTRIBUTORS}" >> release_notes.md
          for c in ${CONTRIBUTORS}
          do
            echo "- @$c" >> release_notes.md
          done
          echo "" >> release_notes.md

        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
      - name: "Update repo tags"
        uses: EndBug/latest-tag@latest
        with:
          ref: ${{ steps.tag_name.outputs.TAG_NAME }}
      - name: "Update releases"
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/EmilyBourne/pyccel/releases \
             -f "tag_name=${tag_name}" -f "name=Version ${version}" -F "body=@release_notes.md" -F "draft=false" -F "prerelease=false" -F "generate_release_notes=false"
        shell: bash
        env:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          version: ${{ steps.tag_name.outputs.VERSION }}
          release_notes: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          GH_TOKEN: ${{ github.token }}

